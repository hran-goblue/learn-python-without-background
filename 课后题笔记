1.请用最快速度说出答案：not 1 or 0 and 1 or 3 and 4 or 5 and 6 or 7 and 8 and 9

  not or and 的优先级是不同的：not > and > or
  “短路逻辑” 3 and 4 == 4，而 3 or 4 == 3。
  
  我们按照优先级给它们加上括号：(not 1) or (0 and 1) or (3 and 4) or (5 and 6) or (7 and 8 and 9)
  == 0 or 0 or 4 or 6 or 9
  == 4

2.assert 的作用是什么？
  
assert这个关键字我们称之为“断言”，当这个关键字后边的条件为假的时候，程序自动崩溃并抛出AssertionError的异常。
什么情况下我们会需要这样的代码呢？当我们在测试程序的时候就很好用，因为与其让错误的条件导致程序今后莫名其妙地崩溃，
不如在错误条件出现的那一瞬间我们实现“自爆”。
一般来说我们可以用Ta再程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作的话，assert关键字就非常有用了。

3.假设有 x = 1，y = 2，z = 3，请问如何快速将三个变量的值互相交换？
  
  x, y, z = z, y, x
  
4.回顾一下 break 和 continue 在循环中起到的作用
     
break语句的作用是终止当前循环，跳出循环体。
continue语句的作用是终止本轮循环并开始下一轮循环（这里要注意的是：在开始下一轮循环之前，会先测试循环条件）。

5. 【学会提高代码的效率】你的觉得以下代码效率方面怎样？有没有办法可以大幅度改进(仍然使用while)？

    i = 0
    string = 'ILoveFishC.com'
    while i < len(string)):
       print(i)
       i += 1
  这段代码之所以“效率比较低”是因为每次循环都需要调用一次 len() 函数（我们还没有学到函数的概念，小甲鱼这里为零基础的朋友形象的解释下：
  就像你打游戏打得正HIGH的时候，老妈让你去买盐......你有两种选择，一次买一包，一天去买五次，或者一次性买五包回来，老妈要就直接给她。）
    i = 0
    string = 'ILoveFishC.com'
    length = len(string)
    while i < length:
       print(i)
       i += 1  

6. 创建一个元组，什么情况下逗号和小括号必须同时存在，缺一不可？
  >>> temp = (‘小甲鱼’, ‘黑夜’, ‘迷途’, ‘小布丁’)
  # 如果我想在“黑夜”和“迷途”之间插入“怡静”，我们应该：
  >>> temp = temp[:2] + (‘怡静’,) + temp[2:]
  
7.
  符号      说明
   %c       格式化字符及其ASCII码
   %s       格式化字符串
   %d       格式化整数
   %o       格式化无符号八进制数
   %x       格式化无符号十六进制数
   %X       格式化无符号十六进制数（大写）
   %f       格式化定点数，可指定小数点后的精度
   %e       用科学计数法格式化定点数
   %E       作用同%e，用科学计数法格式化定点数
   %g   	  根据值的大小决定使用%f或者%e
   %G       作用同%g，根据值的大小决定使用%F或者%E
 
8.请问这个函数有多少个参数？
    def MyFun((x, y), (a, b)):
        return x * y - a * b
    如果你回答两个，那么恭喜你错啦，答案是0，因为类似于这样的写法是错误的！
    我们分析下，函数的参数需要的是变量，而这里你试图用“元祖”的形式来传递是不可行的。

9.请问调用以下这个函数会打印什么内容？
    >>> def hello():
            print('Hello World!')
            return
           print('Welcome To FishC.com!')
    会打印：
      >>> hello()
        Hello World!
    因为当Python执行到return语句的时候，Python认为函数到此结束，需要返回了（尽管没有任何返回值）。
    
10.形式参数指的是函数创建和定义过程中小括号里的参数，而实际参数指的是函数在调用过程中传递进去的参数。

11.
>>> def hello():                ------------------    return 和 print  的区别。
        print('Hello FishC!')
        return 'hello FishC'

>>> temp = hello()
Hello FishC!
>>> temp
'hello FishC'

12. 在函数内部修改全局变量用global，在（）嵌套函数中）内部函数修改外部函数的变量用nonlocal

13. 请目测下边代码执行后，字典dict1的内容是什么？
>>> dict1.fromkeys((1, 2, 3), ('one', 'two', 'three')) 
>>> dict1.fromkeys((1, 3), '数字')

答：执行完成后，字典dict1的内容是：{1: '数字', 3: '数字'}
这里要注意的是，fromkeys方法是直接创建一个新的字典，不要试图使用它来修改一个原有的字典，因为它会直接无情的用把整个字典给覆盖掉。

14. 如果你希望创建的集合是不变的，应该怎么做？

答：frozenset()

15. 字符串分割split(str = ‘ ’ ,[,num = -1]): str 分割符默认空格，num分割次数，默认-1（分割所有）

16.
try:
        print('ABC')
except:
        print('DEF')
else:
        print('GHI')
finally:
        print('JKL')
        
答：只有 except 语句中的内容不被打印，因为 try 语句块中并没有异常，则 else 语句块也会被执行。cr{m}
ABC
GHI
JKL

16.如果我们不希望对象的属性或方法被外部直接引用，我们可以怎么做？类在实例化后哪个方法会被自动调用？
    我们可以在属性或方法名字前边加上双下划线，这样子从外部是无法直接访问到，会显示AttributeError错误。
    __init__方法会在类实例化时被自动调用，我们称之为魔法方法。你可以重写这个方法，为对象定制初始化方案。
  
17.TypeError: __init__() should return None
    __init__() 方法不能返回任何东西

18.假设已经有鸟类的定义，现在我要定义企鹅类继承于鸟类，但我们都知道企鹅是不会飞的，我们应该如何屏蔽父类（鸟类）中飞的方法？
答：覆盖父类方法，例如将函数体内容写 pass，这样调用 fly 方法就没有任何反应了。
class Bird:
        def fly(self):
                print("Fly away!")

class Penguin(Bird):
        def fly(self):
                pass

19.什么是组合（组成）？ 

答：Python 继承机制很有用，但容易把代码复杂化以及依赖隐含继承。因此，经常的时候，我们可以使用组合来代替。在Python里组合其实很简单，
直接在类定义中把需要的类放进去实例化就可以了。!RPp9u%s
例子：
// 乌龟类
class Turtle:
    def __init__(self, x):
        self.num = x
// 鱼类
class Fish:
    def __init__(self, x):
        self.num = x
// 水池类
class Pool:
    def __init__(self, x, y):
        self.turtle = Turtle(x)        // 组合乌龟类进来
        self.fish = Fish(y)        // 组合鱼类进来
     
    def print_num(self):
        print("水池里总共有乌龟 %d 只，小鱼 %d 条！" % (self.turtle.num, self.fish.num))

>>> pool = Pool(1, 10)
>>> pool.print_num()

20. 如果对象的属性跟方法名字相同，会怎样？
答：如果对象的属性跟方法名相同，属性会覆盖方法

21.请动手在一个类中定义一个变量，用于跟踪该类有多少个实例被创建（当实例化一个对象，这个变量+1，当销毁一个对象，这个变量自动-1）
class C:
        count = 0
        def __init__(self):
                C.count += 1             --- 注意这里一定要用类属性而不是实例s实例属性，类属性不会绑定到实例化对象。
        def __del__(self):
                C.count -= 1
                
22.其实 Python 的修饰符就是一种优雅的封装，但要注意的是只可以在模块或类定义内对函数进行修饰，不允许修饰一个类。
一个修饰符就是一个函数，它将被修饰的函数做为参数，并返回修饰后的同名函数或其它可调用的东西。
@something
def f():
    print("I love FishC.com!")
    
# 相当于

def f():
    print("I love FishC.com!")
f = something(f)                

23. 类实例化对象所调用的第一个方法是什么？
答：__new__ 是在一个对象实例化的时候所调用的第一个方法。它跟其他魔法方法不同，它的第一个参数不是 self 而是这个类（cls），
而其他的参数会直接传递给 __init__ 方法的。

24.举一个例子说明如何使用类的静态属性
class C:
    count = 0  # 静态属性

    def __init__(self):
        C.count = C.count + 1  # 类名.属性名的形式引用

    def getCount(self):
        return C.count

   举例说明如何使用类的静态方法，并指出使用类的静态方法有何有点和需要注意的地方？
   答：静态方法是类的特殊方法，静态方法只需要在普通方法的前边加上 @staticmethod 修饰符即可。

class C:
        @staticmethod  # 该修饰符表示 static() 是静态方法
        def static(arg1, arg2, arg3):
                print(arg1, arg2, arg3, arg1 + arg2 + arg3)

        def nostatic(self):
                print("I'm the f**king normal method!")
静态方法并不需要 self 参数，因此即使是使用对象去访问，self 参数也不会传进去

25.






