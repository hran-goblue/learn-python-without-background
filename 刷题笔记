1.请用最快速度说出答案：not 1 or 0 and 1 or 3 and 4 or 5 and 6 or 7 and 8 and 9

  not or and 的优先级是不同的：not > and > or
  “短路逻辑” 3 and 4 == 4，而 3 or 4 == 3。
  
  我们按照优先级给它们加上括号：(not 1) or (0 and 1) or (3 and 4) or (5 and 6) or (7 and 8 and 9)
  == 0 or 0 or 4 or 6 or 9
  == 4

2.assert 的作用是什么？
  
assert这个关键字我们称之为“断言”，当这个关键字后边的条件为假的时候，程序自动崩溃并抛出AssertionError的异常。
什么情况下我们会需要这样的代码呢？当我们在测试程序的时候就很好用，因为与其让错误的条件导致程序今后莫名其妙地崩溃，不如在错误条件出现的那一瞬间我们实现“自爆”。
一般来说我们可以用Ta再程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作的话，assert关键字就非常有用了。

3.假设有 x = 1，y = 2，z = 3，请问如何快速将三个变量的值互相交换？
  
  x, y, z = z, y, x
  
4.回顾一下 break 和 continue 在循环中起到的作用
     
break语句的作用是终止当前循环，跳出循环体。
continue语句的作用是终止本轮循环并开始下一轮循环（这里要注意的是：在开始下一轮循环之前，会先测试循环条件）。

5. 【学会提高代码的效率】你的觉得以下代码效率方面怎样？有没有办法可以大幅度改进(仍然使用while)？

    i = 0
    string = 'ILoveFishC.com'
    while i < len(string)):
       print(i)
       i += 1
  这段代码之所以“效率比较低”是因为每次循环都需要调用一次 len() 函数（我们还没有学到函数的概念，小甲鱼这里为零基础的朋友形象的解释下：就像你打游戏打得正HIGH的时候，老妈让你去买盐......你有两种选择，一次买一包，一天去买五次，或者一次性买五包回来，老妈要就直接给她。）
    i = 0
    string = 'ILoveFishC.com'
    length = len(string)
    while i < length:
       print(i)
       i += 1  

6. 创建一个元组，什么情况下逗号和小括号必须同时存在，缺一不可？
  >>> temp = (‘小甲鱼’, ‘黑夜’, ‘迷途’, ‘小布丁’)
  # 如果我想在“黑夜”和“迷途”之间插入“怡静”，我们应该：
  >>> temp = temp[:2] + (‘怡静’,) + temp[2:]
  
7.
  符号      说明
   %c       格式化字符及其ASCII码
   %s       格式化字符串
   %d       格式化整数
   %o       格式化无符号八进制数
   %x       格式化无符号十六进制数
   %X       格式化无符号十六进制数（大写）
   %f       格式化定点数，可指定小数点后的精度
   %e       用科学计数法格式化定点数
   %E       作用同%e，用科学计数法格式化定点数
   %g   	  根据值的大小决定使用%f或者%e
   %G       作用同%g，根据值的大小决定使用%F或者%E
 
8.请问这个函数有多少个参数？
    def MyFun((x, y), (a, b)):
        return x * y - a * b
    如果你回答两个，那么恭喜你错啦，答案是0，因为类似于这样的写法是错误的！
    我们分析下，函数的参数需要的是变量，而这里你试图用“元祖”的形式来传递是不可行的。

9.请问调用以下这个函数会打印什么内容？
    >>> def hello():
            print('Hello World!')
            return
           print('Welcome To FishC.com!')
    会打印：
      >>> hello()
        Hello World!
    因为当Python执行到return语句的时候，Python认为函数到此结束，需要返回了（尽管没有任何返回值）。
    
10.
